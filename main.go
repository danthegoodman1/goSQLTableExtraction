package main

import (
	"fmt"
	"regexp"
)

// MOSTLY GENERATED BY GPT-4 TURBO

func main() {
	// Example usage
	input := "`validTableName` `invalid-table-name` `1stInvalidName` `$validWithDollar` `_under_score`"

	// Find valid table names within backticks
	tableNames, err := findSQLTableNamesInBackticks(input)
	if err != nil {
		fmt.Printf("Error: %v\n", err)
	} else {
		fmt.Printf("Valid SQL table names found: %v\n", tableNames)
	}
}

// findSQLTableNamesInBackticks takes a string and returns a slice of all the text segments found between backticks that adhere to SQL table naming conventions, with the exception that they can start with a $.
func findSQLTableNamesInBackticks(input string) ([]string, error) {
	// SQL table names can start with a letter or _, optionally preceded by a $, followed by more letters, numbers, or underscores.
	// This pattern reflects that convention.
	pattern := "(`\\$[A-Za-z_][A-Za-z0-9_]*`)"

	// Compile the regular expression
	tableNameRegex, err := regexp.Compile(pattern)
	if err != nil {
		return nil, err // return an error if the regex fails to compile
	}

	// Find all matching segments
	matches := tableNameRegex.FindAllStringSubmatch(input, -1)

	// Extract the captured groups (excluding the backticks themselves)
	var results []string
	for _, match := range matches {
		if len(match) > 1 { // Make sure there is a captured group
			results = append(results, match[1])
		}
	}

	return results, nil
}
